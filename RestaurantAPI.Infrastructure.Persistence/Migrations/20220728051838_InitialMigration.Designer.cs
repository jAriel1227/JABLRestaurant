// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestauranteAPI.Infrastructure.Persistence.Contexts;

namespace RestauranteAPI.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220728051838_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("RestaurantAPI")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.Ingredients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlateId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.Oders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPlates")
                        .HasColumnType("int");

                    b.Property<string>("IdTable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("SubTotal")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.OdersStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrdersStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 7, 28, 1, 18, 37, 656, DateTimeKind.Local).AddTicks(2486),
                            CreatedBy = "DefaultDatabaseAdministrator",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "In process"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 7, 28, 1, 18, 37, 658, DateTimeKind.Local).AddTicks(7204),
                            CreatedBy = "DefaultDatabaseAdministrator",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.Plates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int");

                    b.Property<int>("IdOrders")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatePrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlatesIngredientsId")
                        .HasColumnType("int");

                    b.Property<int>("givePeple")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdOrders");

                    b.HasIndex("PlatesIngredientsId");

                    b.ToTable("Plates");
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.PlatesCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatesCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 7, 28, 1, 18, 37, 661, DateTimeKind.Local).AddTicks(8482),
                            CreatedBy = "DefaultDatabaseAdministrator",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Entry"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 7, 28, 1, 18, 37, 661, DateTimeKind.Local).AddTicks(8518),
                            CreatedBy = "DefaultDatabaseAdministrator",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Main course"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 7, 28, 1, 18, 37, 661, DateTimeKind.Local).AddTicks(8526),
                            CreatedBy = "DefaultDatabaseAdministrator",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dessert"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2022, 7, 28, 1, 18, 37, 661, DateTimeKind.Local).AddTicks(8533),
                            CreatedBy = "DefaultDatabaseAdministrator",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Beverage"
                        });
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.Tables", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numberofpeople")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.TablesStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TablesStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 7, 28, 1, 18, 37, 662, DateTimeKind.Local).AddTicks(995),
                            CreatedBy = "DefaultDatabaseAdministrator",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 7, 28, 1, 18, 37, 662, DateTimeKind.Local).AddTicks(1015),
                            CreatedBy = "DefaultDatabaseAdministrator",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "In care process"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 7, 28, 1, 18, 37, 662, DateTimeKind.Local).AddTicks(1021),
                            CreatedBy = "DefaultDatabaseAdministrator",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Serviced"
                        });
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.Ingredients", b =>
                {
                    b.HasOne("RestauranteAPI.Core.Domain.Entities.Plates", "Plates")
                        .WithMany("Ingredients")
                        .HasForeignKey("PlateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plates");
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.Oders", b =>
                {
                    b.HasOne("RestauranteAPI.Core.Domain.Entities.OdersStatus", "OdersStatus")
                        .WithMany("Oders")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OdersStatus");
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.Plates", b =>
                {
                    b.HasOne("RestauranteAPI.Core.Domain.Entities.PlatesCategory", "PlatesCategory")
                        .WithMany("PlatesC")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestauranteAPI.Core.Domain.Entities.Oders", "Oders")
                        .WithMany("Plates")
                        .HasForeignKey("IdOrders")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestauranteAPI.Core.Domain.Entities.Plates", "PlatesIngredients")
                        .WithMany()
                        .HasForeignKey("PlatesIngredientsId");

                    b.Navigation("Oders");

                    b.Navigation("PlatesCategory");

                    b.Navigation("PlatesIngredients");
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.Tables", b =>
                {
                    b.HasOne("RestauranteAPI.Core.Domain.Entities.TablesStatus", "TablesStatus")
                        .WithMany("Tables")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TablesStatus");
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.Oders", b =>
                {
                    b.Navigation("Plates");
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.OdersStatus", b =>
                {
                    b.Navigation("Oders");
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.Plates", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.PlatesCategory", b =>
                {
                    b.Navigation("PlatesC");
                });

            modelBuilder.Entity("RestauranteAPI.Core.Domain.Entities.TablesStatus", b =>
                {
                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
